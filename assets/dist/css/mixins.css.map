{
	"version": 3,
	"file": "mixins.css",
	"sources": [
		"../../src/scss/mixins.scss"
	],
	"sourcesContent": [
		"// --------------------------------------------------\n// Font style mixins\n// --------------------------------------------------\n\n@mixin font-style($size: 14px, $weight: 400, $height: auto){\n    font-size: $size;\n    font-weight: $weight;\n    line-height: $height;\n}\n\n// --------------------------------------------------\n// Flexbox SASS mixins\n// The spec: http://www.w3.org/TR/css3-flexbox\n// Get it from: https://gist.github.com/richardtorres314/26b18e12958ba418bb37993fdcbfc1bd\n// Important to autoprefix the style\n// --------------------------------------------------\n\n  // Flexbox display\n  @mixin flexbox {\n    display: -webkit-box;\n    display: -moz-box;\n    display: -ms-flexbox;\n    display: -webkit-flex;\n    display: flex;\n  }\n  \n  // Inline flex display\n  @mixin inline-flex {\n    display: -webkit-inline-box;\n    display: -moz-inline-box;\n    display: -webkit-inline-flex;\n    display: -ms-inline-flexbox;\n    display: inline-flex;\n  }\n  \n  // The 'flex' shorthand\n  // - applies to: flex items\n  // <positive-number>, initial, auto, or none\n  @mixin flex($fg: 1, $fs: 0, $fb: auto) {\n  \n    // Set a variable to be used by box-flex properties\n    $fg-boxflex: $fg;\n  \n    // Box-Flex only supports a flex-grow value so lets grab the\n    // first item in the list and just return that.\n    @if type-of($fg) == 'list' {\n      $fg-boxflex: nth($fg, 1);\n    }\n  \n     -webkit-box: $fg-boxflex;\n        -moz-box: $fg-boxflex;\n    -webkit-flex: $fg $fs $fb;\n        -ms-flex: $fg $fs $fb;\n            flex: $fg $fs $fb;\n  }\n  \n  // Flex Flow Direction\n  // - applies to: flex containers\n  // row (default) | row-reverse | column | column-reverse\n  @mixin flex-direction($direction: row) {\n    @if $direction == row-reverse {\n      -webkit-box-direction: reverse;\n      -webkit-box-orient: horizontal;\n         -moz-box-direction: reverse;\n         -moz-box-orient: horizontal;\n    } @else if $direction == column {\n      -webkit-box-direction: normal;\n       -webkit-box-orient: vertical;\n         -moz-box-direction: normal;\n          -moz-box-orient: vertical;\n    } @else if $direction == column-reverse {\n      -webkit-box-direction: reverse;\n        -webkit-box-orient: vertical;\n         -moz-box-direction: reverse;\n           -moz-box-orient: vertical;\n    } @else {\n       -webkit-box-direction: normal;\n      -webkit-box-orient: horizontal;\n          -moz-box-direction: normal;\n         -moz-box-orient: horizontal;\n    }\n    -webkit-flex-direction: $direction;\n        -ms-flex-direction: $direction;\n            flex-direction: $direction;\n  }\n  \n  // Flex Line Wrapping\n  // - applies to: flex containers\n  // nowrap | wrap | wrap-reverse\n  @mixin flex-wrap($value: nowrap) {\n    // No Webkit/FF Box fallback.\n    -webkit-flex-wrap: $value;\n    @if $value == nowrap {\n      -ms-flex-wrap: none;\n    } @else {\n      -ms-flex-wrap: $value;\n    }\n    flex-wrap: $value;\n  }\n  \n  // Flex Direction and Wrap\n  // - applies to: flex containers\n  // <flex-direction> || <flex-wrap>\n  @mixin flex-flow($values: (row nowrap)) {\n    // No Webkit/FF Box fallback.\n    -webkit-flex-flow: $values;\n        -ms-flex-flow: $values;\n            flex-flow: $values;\n  }\n  \n  // Display Order\n  // - applies to: flex items\n  // <integer>\n  @mixin order($int: 0) {\n    -webkit-box-ordinal-group: $int + 1;\n       -moz-box-ordinal-group: $int + 1;\n                -webkit-order: $int;\n               -ms-flex-order: $int;\n                        order: $int;\n  }\n  \n  // Flex grow factor\n  // - applies to: flex items\n  // <number>\n  @mixin flex-grow($int: 1) {\n     -webkit-box-flex: $int;\n        -moz-box-flex: $int;\n    -webkit-flex-grow: $int;\n             -ms-flex: $int;\n            flex-grow: $int;\n  }\n  \n  // Flex shrink\n  // - applies to: flex item shrink factor\n  // <number> \n  @mixin flex-shrink($int: 0) {\n    -webkit-flex-shrink: $int;\n       -moz-flex-shrink: $int;\n               -ms-flex: $int;\n            flex-shrink: $int;\n  }\n  \n  // Flex basis\n  // - the initial main size of the flex item\n  // - applies to: flex itemsnitial main size of the flex item\n  // <width> \n  @mixin flex-basis($value: auto) {\n    -webkit-flex-basis: $value;\n            flex-basis: $value;\n  }\n  \n  // Axis Alignment\n  // - applies to: flex containers\n  // flex-start | flex-end | center | space-between | space-around \n  @mixin justify-content($value: flex-start) {\n    @if $value == flex-start {\n      -webkit-box-pack: start;\n         -moz-box-pack: start;\n         -ms-flex-pack: start;\n    } @else if $value == flex-end {\n      -webkit-box-pack: end;\n         -moz-box-pack: end;\n         -ms-flex-pack: end;\n    } @else if $value == space-between {\n      -webkit-box-pack: justify;\n         -moz-box-pack: justify;\n         -ms-flex-pack: justify;\n    } @else if $value == space-around {\n         -ms-flex-pack: distribute;\n    } @else {\n      -webkit-box-pack: $value;\n         -moz-box-pack: $value;\n         -ms-flex-pack: $value;\n    }\n    -webkit-justify-content: $value;\n            justify-content: $value;\n  }\n  \n  // Packing Flex Lines\n  // - applies to: multi-line flex containers\n  // flex-start | flex-end | center | space-between | space-around | stretch \n  @mixin align-content($value: stretch) {\n    // No Webkit Box Fallback.\n    -webkit-align-content: $value;\n    @if $value == flex-start {\n      -ms-flex-line-pack: start;\n    } @else if $value == flex-end {\n      -ms-flex-line-pack: end;\n    } @else {\n      -ms-flex-line-pack: $value;\n    }\n    align-content: $value;\n  }\n  \n  // Cross-axis Alignment\n  // - applies to: flex containers\n  // flex-start | flex-end | center | baseline | stretch \n  @mixin align-items($value: stretch) {\n    @if $value == flex-start {\n      -webkit-box-align: start;\n         -moz-box-align: start;\n         -ms-flex-align: start;\n    } @else if $value == flex-end {\n      -webkit-box-align: end;\n         -moz-box-align: end;\n         -ms-flex-align: end;\n    } @else {\n      -webkit-box-align: $value;\n         -moz-box-align: $value;\n         -ms-flex-align: $value;\n    }\n    -webkit-align-items: $value;\n            align-items: $value;\n  }\n  \n  // Cross-axis Alignment\n  // - applies to: flex items\n  // auto | flex-start | flex-end | center | baseline | stretch \n  @mixin align-self($value: auto) {\n    // No Webkit Box Fallback.\n    -webkit-align-self: $value;\n    @if $value == flex-start {\n      -ms-flex-item-align: start;\n    } @else if $value == flex-end {\n      -ms-flex-item-align: end;\n    } @else {\n      -ms-flex-item-align: $value;\n    }\n    align-self: $value;\n  }"
	],
	"names": [],
	"mappings": ""
}